# Task ID: 3
# Title: Develop YouTube Captions Extraction Service
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create a service to extract and parse captions/subtitles from YouTube videos.
# Details:
1. Utilize yt-dlp's caption extraction functionality
2. Create CaptionService class for handling caption retrieval and parsing
3. Support multi-language caption listing and selection
4. Parse caption timestamps and generate structured text
5. Handle differences between auto-generated captions and manually uploaded ones
6. Provide fallback options when captions are unavailable (optional: simplified Whisper implementation)
7. Implement caption data caching to avoid repeated downloads
8. Provide available language list and previews for the UI layer

# Test Strategy:
Test caption extraction with different types of videos (with official captions, auto-generated captions, and without captions). Verify timestamp parsing accuracy. Test multi-language caption switching.

# Subtasks:
## 1. Set up yt-dlp integration for caption extraction [done]
### Dependencies: None
### Description: Create a wrapper around yt-dlp to extract captions from YouTube videos
### Details:
Implementation steps:
1. Add yt-dlp as a dependency to the project
2. Create a YtDlpWrapper class that handles the execution of yt-dlp commands
3. Implement a method to list available captions for a given YouTube video URL
4. Implement a method to download captions in a specific language
5. Add proper error handling for network issues and invalid URLs
6. Test with various YouTube videos to ensure reliable extraction

Testing approach:
- Unit test the wrapper with mocked yt-dlp responses
- Integration test with actual YouTube videos having different caption types

## 2. Create CaptionService class foundation [done]
### Dependencies: 3.1
### Description: Develop the core CaptionService class with basic functionality
### Details:
Implementation steps:
1. Create a CaptionService class with dependency injection for the YtDlpWrapper
2. Define the service interface with methods for listing available captions and retrieving captions
3. Implement basic error handling and logging
4. Create data models for Caption metadata (language, isAutoGenerated, etc.)
5. Implement method to get available caption languages for a video

Testing approach:
- Unit test the service with mocked YtDlpWrapper
- Test error handling with various edge cases

## 3. Implement caption parsing functionality [done]
### Dependencies: 3.2
### Description: Create parsers for different caption formats to extract text and timestamps
### Details:
Implementation steps:
1. Create a CaptionParser interface
2. Implement parsers for common caption formats (SRT, VTT, etc.)
3. Extract text content and timestamps from raw caption data
4. Create a structured data model for parsed captions with timestamps
5. Handle special characters and formatting in captions
6. Implement detection of caption format and automatic parser selection

Testing approach:
- Unit test each parser with sample caption files
- Test with edge cases like empty captions, unusual formatting

## 4. Add support for auto-generated and manual captions [done]
### Dependencies: 3.3
### Description: Handle differences between auto-generated and manually uploaded captions
### Details:
Implementation steps:
1. Extend the caption metadata model to include caption type (auto-generated vs manual)
2. Modify the YtDlpWrapper to extract caption type information
3. Implement special handling for auto-generated captions (which may include speaker identification)
4. Add methods to filter available captions by type
5. Handle formatting differences between caption types during parsing

Testing approach:
- Test with videos having both auto-generated and manual captions
- Verify correct identification and parsing of different caption types

## 5. Implement caption caching mechanism [done]
### Dependencies: 3.3
### Description: Create a caching system to avoid repeated downloads of the same captions
### Details:
Implementation steps:
1. Design a caching strategy (file-based, in-memory, or database)
2. Create a CaptionCache class with methods to store and retrieve cached captions
3. Implement cache key generation based on video ID and language
4. Add cache expiration policy
5. Modify CaptionService to check cache before downloading
6. Update CaptionService to store newly downloaded captions in cache

Testing approach:
- Unit test the caching mechanism
- Verify cache hits and misses with integration tests
- Test cache expiration functionality

## 6. Develop fallback options for missing captions [done]
### Dependencies: 3.4, 3.5
### Description: Implement fallback strategies when captions are unavailable
### Details:
Implementation steps:
1. Create a FallbackStrategy interface
2. Implement a simple Whisper integration for speech-to-text as fallback
3. Add configuration options for fallback preferences
4. Modify CaptionService to attempt fallbacks when primary caption retrieval fails
5. Implement fallback chain execution with proper error handling
6. Add logging for fallback usage

Testing approach:
- Test fallback triggering conditions
- Integration test with videos lacking captions
- Verify quality of fallback captions

## 7. Create caption preview functionality [done]
### Dependencies: 3.3, 3.5
### Description: Implement methods to generate caption previews for UI display
### Details:
Implementation steps:
1. Add methods to CaptionService to generate short previews of captions
2. Implement text truncation and formatting for previews
3. Create preview generation for multiple languages
4. Add options to customize preview length and format
5. Ensure previews are cached along with full captions

Testing approach:
- Unit test preview generation with various caption inputs
- Verify preview formatting and length constraints
- Test preview generation for different languages

## 8. Finalize API and documentation [pending]
### Dependencies: 3.2, 3.3, 3.4, 3.5, 3.6, 3.7
### Description: Complete the service API and create comprehensive documentation
### Details:
Implementation steps:
1. Review and refine the CaptionService public API
2. Ensure consistent error handling and return types
3. Add detailed code documentation and examples
4. Create usage examples for common scenarios
5. Implement any missing edge case handling
6. Create integration tests covering the full service functionality
7. Benchmark performance and optimize if needed

Testing approach:
- End-to-end testing with various YouTube videos
- Performance testing with large caption files
- Usability testing of the API with sample client code

